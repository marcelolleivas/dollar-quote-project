name: pipeline
on: push

jobs:
  checks:
    runs-on: ubuntu-latest
    steps:

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10.2"

      #----------------------------------------------
      #       install & configure pipenv
      #----------------------------------------------
      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pipenv wheel

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-pipenv-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('Pipfile.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-pipenv-dependencies.outputs.cache-hit != 'true'
        run: pipenv install --dev --deploy

      #----------------------------------------------
      #           run pipeline actions
      #----------------------------------------------
      - name: Safety checking installed dependencies for known security vulnerabilities
        run: pipenv run pip freeze | pipenv run safety check --stdin

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          pipenv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          pipenv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Lint with isort
        run: pipenv run isort --check .

      - name: Check python code format with black
        run: pipenv run black .

      - name: Run unit tests
        run: pipenv run coverage run pytest
        env:
          API_KEY: ""
          DJANGO_SECRET_KEY: ""
          DATABASE_URL: ""

      - name: Check coverage
        run: pipenv run coverage report --fail-under=95
